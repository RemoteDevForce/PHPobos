name: Docker Build - ECS Service

on:
  push:
    # branches:
    #   - master
    # tags:
    #   - v\d+\.\d+\.\d+
  pull_request:
  workflow_dispatch:

env:
  ENV: demo

jobs:
  build-actions:
    name: Build Docker Image - ECS Service
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform/tf-aws-infra

    steps:

      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        id: build
        run: |-
          make build

      - name: Test App
        id: build
        run: |-
          make tf-plan

      - name: Comment on PR
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          format_out: ${{ steps.fmt.outputs.stdout }}
          format_err: ${{ steps.fmt.outputs.stderr }}
          init_out: ${{ steps.init.outputs.stdout }}
          init_err: ${{ steps.init.outputs.stderr }}
          validate_out: ${{ steps.validate.outputs.stdout }}
          validate_err: ${{ steps.validate.outputs.stderr }}
          plan: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const CODE_BLOCK = '```';
            const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const output = `
            ### ${ fmt_result } Terraform Format and Style üé®
            <details><summary>Logs</summary>
            Output
            ${ CODE_BLOCK }diff
            ${ process.env.format_out }
            ${ CODE_BLOCK }
            Errors
            ${ CODE_BLOCK }
            ${ process.env.format_err }
            ${ CODE_BLOCK }
            </details> <!-- End Format Logs -->
            ### ${ init_result } Terraform Initialization ‚öôÔ∏è
            <details><summary>Logs</summary>
            Output
            ${ CODE_BLOCK }
            ${ process.env.init_out }
            ${ CODE_BLOCK }
            Errors
            ${ CODE_BLOCK }
            ${ process.env.init_err }
            ${ CODE_BLOCK }
            </details> <!-- End Init Logs -->
            ### ${ validate_result } Terraform Validation ü§ñ
            <details><summary>Logs</summary>
            Output
            ${ CODE_BLOCK }
            ${ process.env.validate_out }
            ${ CODE_BLOCK }
            Errors
            ${ CODE_BLOCK }
            ${ process.env.validate_err }
            ${ CODE_BLOCK }
            </details> <!-- End Validate Logs -->
            ### ${ plan_result } Terraform Plan üìñ
            <details><summary>Logs</summary>
            ${ CODE_BLOCK }terraform
            ${ process.env.plan }
            ${ CODE_BLOCK }
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

# One day when GitHub Actions Support User Input (Blocking Steps) then we should pump the plan output file into tf apply
      - name: 'End results'
        shell: bash
        run: |
          echo fmt
          test ${{ steps.fmt.outputs.exitcode }} -eq 0
          echo init
          test ${{ steps.init.outputs.exitcode }} -eq 0
          echo validate
          test ${{ steps.validate.outputs.exitcode }} -eq 0
          echo plan
          test ${{ steps.plan.outputs.exitcode }} -eq 0
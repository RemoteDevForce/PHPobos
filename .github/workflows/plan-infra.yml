name: Terraform Plan - Infrastructure

on:
  workflow_dispatch:
  pull_request:

env:
  TF_ACTION: plan

jobs:
  terraform-validation:
    name: TF Validation
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform/tf-aws-infra

    steps:
      - name: develop - Set ENV to staging/demo
        if: endsWith(github.event.pull_request.base.ref, '/develop') || endsWith(github.ref, '/develop')
        run: echo '::set-output name=ENV::demo'

      - name: main - Set ENV to prod
        if: endsWith(github.event.pull_request.base.ref, '/main') || endsWith(github.ref, '/main')
        run: echo '::set-output name=ENV::prod'

      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check -diff
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |-
          make tf-init
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

  terraform-plan:
    name: TF Plan
    runs-on: ubuntu-latest
    needs: terraform-validation

    steps:
      - name: Terraform Plan
        id: plan
        run: |-
          make tf-plan
        continue-on-error: true

      - name: Comment on PR
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          format_out: ${{ steps.fmt.outputs.stdout }}
          format_err: ${{ steps.fmt.outputs.stderr }}
          init_out: ${{ steps.init.outputs.stdout }}
          init_err: ${{ steps.init.outputs.stderr }}
          validate_out: ${{ steps.validate.outputs.stdout }}
          validate_err: ${{ steps.validate.outputs.stderr }}
          plan: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const CODE_BLOCK = '```';
            const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
            const output = `
            ### ${ fmt_result } Terraform Format and Style üé®
            <details><summary>Logs</summary>
            Output
            ${ CODE_BLOCK }diff
            ${ process.env.format_out }
            ${ CODE_BLOCK }
            Errors
            ${ CODE_BLOCK }
            ${ process.env.format_err }
            ${ CODE_BLOCK }
            </details> <!-- End Format Logs -->
            ### ${ init_result } Terraform Initialization ‚öôÔ∏è
            <details><summary>Logs</summary>
            Output
            ${ CODE_BLOCK }
            ${ process.env.init_out }
            ${ CODE_BLOCK }
            Errors
            ${ CODE_BLOCK }
            ${ process.env.init_err }
            ${ CODE_BLOCK }
            </details> <!-- End Init Logs -->
            ### ${ validate_result } Terraform Validation ü§ñ
            <details><summary>Logs</summary>
            Output
            ${ CODE_BLOCK }
            ${ process.env.validate_out }
            ${ CODE_BLOCK }
            Errors
            ${ CODE_BLOCK }
            ${ process.env.validate_err }
            ${ CODE_BLOCK }
            </details> <!-- End Validate Logs -->
            ### ${ plan_result } Terraform Plan üìñ
            <details><summary>Logs</summary>
            ${ CODE_BLOCK }terraform
            ${ process.env.plan }
            ${ CODE_BLOCK }
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # One day when GitHub Actions Support User Input (Blocking Steps) then we should pump the plan output file into tf apply
      - name: Job Results
        shell: bash
        run: |
          echo fmt
          test ${{ steps.fmt.outputs.exitcode }} -eq 0
          echo init
          test ${{ steps.init.outputs.exitcode }} -eq 0
          echo validate
          test ${{ steps.validate.outputs.exitcode }} -eq 0
          echo plan
          test ${{ steps.plan.outputs.exitcode }} -eq 0
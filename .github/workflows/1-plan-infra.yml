name: 1 - Terraform Plan - Infrastructure

on:
  workflow_dispatch:
  pull_request:

defaults:
  run:
    working-directory: terraform/tf-aws-infra

jobs:
  tf_validation:
    name: TF Pre-Flight Checks
    runs-on: ubuntu-latest
    outputs:
      fmt_exitcode: ${{ steps.fmt.outputs.exitcode }}
      init_exitcode: ${{ steps.init.outputs.exitcode }}
      validate_exitcode: ${{ steps.validate.outputs.exitcode }}

    steps:
      # Checkout the code first, otherwise you get "Error: No such file or directory"
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: develop - Set ENV to staging
        if: endsWith(github.event.pull_request.base.ref, '/develop') || endsWith(github.ref, '/develop')
        run: echo "ENV=staging" >> $GITHUB_ENV

      - name: main - Set ENV to prod
        if: endsWith(github.event.pull_request.base.ref, '/main') || endsWith(github.ref, '/main')
        run: echo "ENV=prod" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check -diff
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: make tf-init
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

  # Each job starts from a fresh workspace
  tf_plan:
    name: TF Plan
    runs-on: ubuntu-latest
    needs: tf_validation
    # You must pull in outputs to bring them into the current job scope
    outputs:
      plan_exitcode: ${{ steps.plan.outputs.exitcode }}

    # Common mistake on new a new job is not checking the code out again
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: develop - Set ENV to staging
        if: endsWith(github.event.pull_request.base.ref, '/develop') || endsWith(github.ref, '/develop')
        run: echo "ENV=staging" >> $GITHUB_ENV

      - name: main - Set ENV to prod
        if: endsWith(github.event.pull_request.base.ref, '/main') || endsWith(github.ref, '/main')
        run: echo "ENV=prod" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3

      - name: Terraform Plan
        id: plan
        run: make tf-plan
        continue-on-error: true

  status_output:
    name: Status Output
    runs-on: ubuntu-latest
    needs: [tf_validation,tf_plan]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Comment on PR
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const CODE_BLOCK = '```';
            const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':white_check_mark:';
            const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':white_check_mark:';
            const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':white_check_mark:';
            const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':white_check_mark:';
            const output = `
            ### ${ fmt_result } Terraform Format and Style üé®
            ### ${ init_result } Terraform Initialization ‚öôÔ∏è
            ### ${ validate_result } Terraform Validation ü§ñ
            ### ${ plan_result } Terraform Plan üìñ
            *Note:* Check Service Plan in Actions Tag After Infra Plan is Complete
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

       # Very helpful to see what is available to you
#      - name: Dump steps context
#        env:
#          STEPS_CONTEXT: ${{ toJson(steps) }}
#        run: echo "$STEPS_CONTEXT"

      # One day when GitHub Actions Support User Input (Blocking Steps) then we should pump the plan output file into tf apply
      - name: Job Results
        run: |
          echo fmt
          test ${{ needs.tf_validation.outputs.fmt_exitcode }} -eq 0
          echo init
          test ${{ needs.tf_validation.outputs.init_exitcode }} -eq 0
          echo validate
          test ${{ needs.tf_validation.outputs.validate_exitcode }} -eq 0
          echo plan
          test ${{ needs.tf_plan.outputs.plan_exitcode }} -eq 0